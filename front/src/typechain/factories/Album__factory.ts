/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Album, AlbumInterface } from "../Album";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "contract AlbumTracker",
        name: "_tracker",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "index",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "purchased",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "title",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d65380380610d65833981810160405281019061003291906102b5565b836000819055508260019081610048919061054f565b508160038190555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050610621565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6100c1816100ae565b81146100cc57600080fd5b50565b6000815190506100de816100b8565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610137826100ee565b810181811067ffffffffffffffff82111715610156576101556100ff565b5b80604052505050565b600061016961009a565b9050610175828261012e565b919050565b600067ffffffffffffffff821115610195576101946100ff565b5b61019e826100ee565b9050602081019050919050565b60005b838110156101c95780820151818401526020810190506101ae565b60008484015250505050565b60006101e86101e38461017a565b61015f565b905082815260208101848484011115610204576102036100e9565b5b61020f8482856101ab565b509392505050565b600082601f83011261022c5761022b6100e4565b5b815161023c8482602086016101d5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061027082610245565b9050919050565b600061028282610265565b9050919050565b61029281610277565b811461029d57600080fd5b50565b6000815190506102af81610289565b92915050565b600080600080608085870312156102cf576102ce6100a4565b5b60006102dd878288016100cf565b945050602085015167ffffffffffffffff8111156102fe576102fd6100a9565b5b61030a87828801610217565b935050604061031b878288016100cf565b925050606061032c878288016102a0565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061038a57607f821691505b60208210810361039d5761039c610343565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826103c8565b61040f86836103c8565b95508019841693508086168417925050509392505050565b6000819050919050565b600061044c610447610442846100ae565b610427565b6100ae565b9050919050565b6000819050919050565b61046683610431565b61047a61047282610453565b8484546103d5565b825550505050565b600090565b61048f610482565b61049a81848461045d565b505050565b5b818110156104be576104b3600082610487565b6001810190506104a0565b5050565b601f821115610503576104d4816103a3565b6104dd846103b8565b810160208510156104ec578190505b6105006104f8856103b8565b83018261049f565b50505b505050565b600082821c905092915050565b600061052660001984600802610508565b1980831691505092915050565b600061053f8383610515565b9150826002028217905092915050565b61055882610338565b67ffffffffffffffff811115610571576105706100ff565b5b61057b8254610372565b6105868282856104c2565b600060209050601f8311600181146105b957600084156105a7578287015190505b6105b18582610533565b865550610619565b601f1984166105c7866103a3565b60005b828110156105ef578489015182556001820191506020850194506020810190506105ca565b8683101561060c5784890151610608601f891682610515565b8355505b6001600288020188555050505b505050505050565b610735806106306000396000f3fe6080604052600436106100435760003560e01c80632986c0e5146102625780634a79d50c1461028d578063879f9c96146102b8578063a035b1fe146102e35761025d565b3661025d5760001515600260009054906101000a900460ff1615151461009e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009590610418565b60405180910390fd5b34600054146100e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d990610484565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163460035460405160240161013191906104bd565b6040516020818303038152906040527f800fb83f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101bb9190610549565b60006040518083038185875af1925050503d80600081146101f8576040519150601f19603f3d011682016040523d82523d6000602084013e6101fd565b606091505b5050905080610241576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610238906105d2565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055005b600080fd5b34801561026e57600080fd5b5061027761030e565b60405161028491906104bd565b60405180910390f35b34801561029957600080fd5b506102a2610314565b6040516102af9190610647565b60405180910390f35b3480156102c457600080fd5b506102cd6103a2565b6040516102da9190610684565b60405180910390f35b3480156102ef57600080fd5b506102f86103b5565b60405161030591906104bd565b60405180910390f35b60035481565b60018054610321906106ce565b80601f016020809104026020016040519081016040528092919081815260200182805461034d906106ce565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b505050505081565b600260009054906101000a900460ff1681565b60005481565b600082825260208201905092915050565b7f5468697320616c62756d20697320616c72656164792070757263686173656421600082015250565b60006104026020836103bb565b915061040d826103cc565b602082019050919050565b60006020820190508181036000830152610431816103f5565b9050919050565b7f576520616363657074206f6e6c792066756c6c207061796d656e747321000000600082015250565b600061046e601d836103bb565b915061047982610438565b602082019050919050565b6000602082019050818103600083015261049d81610461565b9050919050565b6000819050919050565b6104b7816104a4565b82525050565b60006020820190506104d260008301846104ae565b92915050565b600081519050919050565b600081905092915050565b60005b8381101561050c5780820151818401526020810190506104f1565b60008484015250505050565b6000610523826104d8565b61052d81856104e3565b935061053d8185602086016104ee565b80840191505092915050565b60006105558284610518565b915081905092915050565b7f536f7272792c20776520636f756c64206e6f742070726f6365737320796f757260008201527f207472616e73616374696f6e2e00000000000000000000000000000000000000602082015250565b60006105bc602d836103bb565b91506105c782610560565b604082019050919050565b600060208201905081810360008301526105eb816105af565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610619826105f2565b61062381856103bb565b93506106338185602086016104ee565b61063c816105fd565b840191505092915050565b60006020820190508181036000830152610661818461060e565b905092915050565b60008115159050919050565b61067e81610669565b82525050565b60006020820190506106996000830184610675565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106e657607f821691505b6020821081036106f9576106f861069f565b5b5091905056fea26469706673582212204fad3c893a491db55b9096705f9ab8ea6e3f4cb520ec8ade07173c6157291ff364736f6c634300081c0033";

type AlbumConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AlbumConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Album__factory extends ContractFactory {
  constructor(...args: AlbumConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _price: BigNumberish,
    _title: string,
    _index: BigNumberish,
    _tracker: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _price,
      _title,
      _index,
      _tracker,
      overrides || {}
    );
  }
  override deploy(
    _price: BigNumberish,
    _title: string,
    _index: BigNumberish,
    _tracker: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _price,
      _title,
      _index,
      _tracker,
      overrides || {}
    ) as Promise<
      Album & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Album__factory {
    return super.connect(runner) as Album__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AlbumInterface {
    return new Interface(_abi) as AlbumInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Album {
    return new Contract(address, _abi, runner) as unknown as Album;
  }
}
